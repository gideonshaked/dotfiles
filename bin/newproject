#!/usr/bin/env python3

import os
import subprocess
import sys

from rich import print
from rich.console import Console
from rich.prompt import Confirm, Prompt
from rich.table import Table

# CONFIGURATION
OBSIDIAN_VAULT_PATH = os.path.expanduser("~/Documents/app_folders/obsidian_vault")
GOOGLE_DRIVE_MOUNT = os.path.expanduser("~/Google Drive/My Drive")
DROPBOX_MOUNT = os.path.expanduser("~/University of Michigan Dropbox")

console = Console()


def log_message(message, status="info"):
    """Logs messages with Rich styling."""
    status_symbols = {"info": "üîπ", "success": "‚úÖ", "warning": "‚ö†Ô∏è", "error": "‚ùå"}
    print(f"{status_symbols.get(status, '‚ÑπÔ∏è')} [bold]{message}[/bold]")


def create_symlink(source, target):
    """Creates a symlink from source to target with logging."""
    try:
        if os.path.exists(target) or os.path.islink(target):
            log_message(f"Symlink already exists: {target} ‚Üí {source}", "warning")
        else:
            os.symlink(source, target)
            log_message(f"Created symlink: {target} ‚Üí {source}", "success")
    except Exception as e:
        log_message(f"Error creating symlink: {e}", "error")


def user_symlink_selection():
    """Allows the user to select which symlinks to create."""
    print("\n[bold magenta]üîó Select which symlinks to create (type y/n):[/bold magenta]")
    options = {
        "Google Drive": Confirm.ask("Create Google Drive symlink?", default=False),
        "Obsidian Vault": Confirm.ask("Create Obsidian Vault symlink?", default=False),
        "Dropbox": Confirm.ask("Create Dropbox symlink?", default=False),
    }
    return options


def get_folder(subfolder_type, root, project_name):
    """Allows the user to interactively walk through the directory structure."""
    use_subfolder = Confirm.ask(
        f"\nWould you like to organize this project inside of an existing {subfolder_type} folder ({root})?",
        default=False,
    )

    def prompt_change_directory_name():
        new_name = Prompt.ask(
            f"Enter a new name for the {subfolder_type} folder. Press enter to keep the default.",
            default=project_name,
        )
        return new_name

    if use_subfolder:
        current_path = root
        while True:
            subfolders = []
            subfolders.append("COMMAND: Go up")
            subfolders.append("COMMAND: Select current folder")
            subfolders.append("COMMAND: Create a new subfolder here")
            subfolders = subfolders + [
                d
                for d in os.listdir(current_path)
                if os.path.isdir(os.path.join(current_path, d))
                and d not in [".env", ".git", ".DS_Store", ".smart-env", ".obsidian"]
            ]
            if not subfolders:
                log_message("No subfolders found in the current directory.", "warning")
                break

            table = Table(
                title=f"üìÅ Current Directory: {os.path.relpath(current_path, root)}",
                show_header=True,
                header_style="bold magenta",
            )
            table.add_column("Index", style="cyan", justify="right")
            table.add_column("Subfolder Name", style="bold yellow", justify="left")

            for idx, subfolder in enumerate(subfolders):
                table.add_row(str(idx), subfolder)

            console.print(table)
            selected_index = Prompt.ask(
                "Select a subfolder by index",
                choices=[str(i) for i in range(len(subfolders))],
                default="",
            )

            selected_folder = subfolders[int(selected_index)]
            if selected_folder == "COMMAND: Go up":
                current_path = os.path.dirname(current_path)
            elif selected_folder == "COMMAND: Create a new subfolder here":
                new_subfolder = Prompt.ask("Enter the name of the new subfolder")
                return os.path.join(root, current_path, new_subfolder, prompt_change_directory_name())
            elif selected_folder == "COMMAND: Select current folder":
                return os.path.join(root, current_path, prompt_change_directory_name())
            else:
                current_path = os.path.join(current_path, selected_folder)

    return os.path.join(root, project_name)


def create_project_structure(project_folder):
    """Creates the project folder structure and symlinks based on user selection."""
    project_name = os.path.basename(project_folder)
    log_message(f"Creating project structure for: {project_name}", "info")

    # Get user selection
    selected_symlinks = user_symlink_selection()

    # Create a table to summarize user selections
    table = Table(title="üìå Project Setup Summary", show_header=True, header_style="bold magenta")
    table.add_column("Description", style="cyan", justify="left")
    table.add_column("Path", style="bold yellow", justify="left")

    table.add_row("Main Project Folder", project_folder)

    if selected_symlinks["Google Drive"]:
        google_drive_folder = get_folder("Google Drive", GOOGLE_DRIVE_MOUNT, project_name)
        gdrive_symlink = os.path.join(project_folder, f"{project_name}_gdrive")
        table.add_row("Symlink (Google Drive)", f"{gdrive_symlink} ‚Üí {google_drive_folder}")

    if selected_symlinks["Obsidian Vault"]:
        obsidian_folder = get_folder("Obsidian Vault", OBSIDIAN_VAULT_PATH, project_name)
        obsidian_symlink = os.path.join(project_folder, f"{project_name}_obsidian")
        table.add_row("Symlink (Obsidian)", f"{obsidian_symlink} ‚Üí {obsidian_folder}")

    if selected_symlinks["Dropbox"]:
        dropbox_folder = get_folder("Dropbox", DROPBOX_MOUNT, project_name)
        dropbox_symlink = os.path.join(project_folder, f"{project_name}_dropbox")
        table.add_row("Symlink (Dropbox)", f"{dropbox_symlink} ‚Üí {dropbox_folder}")

    console.print(table)

    # Confirmation prompt
    if not Confirm.ask("\nProceed with creating these folders and symlinks?", default=False):
        log_message("Operation canceled.", "error")
        sys.exit(0)

    # Create the main project folder if it doesn't exist
    os.makedirs(project_folder, exist_ok=True)
    log_message(f"Created project folder: {project_folder}", "success")

    # Create actual storage locations and symlinks based on user selection
    if selected_symlinks["Google Drive"]:
        os.makedirs(google_drive_folder, exist_ok=True)
        create_symlink(google_drive_folder, gdrive_symlink)

    if selected_symlinks["Obsidian Vault"]:
        os.makedirs(obsidian_folder, exist_ok=True)
        create_symlink(obsidian_folder, obsidian_symlink)

    if selected_symlinks["Dropbox"]:
        os.makedirs(dropbox_folder, exist_ok=True)
        create_symlink(dropbox_folder, dropbox_symlink)

    log_message(f"üéâ Project setup complete: {project_folder}", "success")

    # Open Finder to the new project folder
    if Confirm.ask("Open Finder to the new project folder?", default=True):
        log_message("üìÇ Opening Finder...", "info")
        subprocess.run(["open", project_folder])


if __name__ == "__main__":
    if len(sys.argv) < 2:
        log_message(
            f"Usage: {os.path.basename(sys.argv[0])} <path_to_new_project_folder>",
            "error",
        )
        sys.exit(1)

    project_path = os.path.abspath(sys.argv[1])
    create_project_structure(project_path)
